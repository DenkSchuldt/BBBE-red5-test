<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               minWidth="955" minHeight="600" applicationComplete="applicationComplete(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[	
			
			//Security.allowDomain("*");
			//Security.loadPolicyFile("xmlsocket://localhost:7843");
			
			import mx.events.FlexEvent;
			import flash.net.*;
			
			
			
			//--------------------------------
			/*     Variable declarations    */
			//--------------------------------
			
			[Bindable] private var swfURL:String = "";					   
			private var myTimer:Timer;
			
			[Bindable] private var socketURL: String = "localhost";
			[Bindable] protected var _socket: XMLSocket;
			
			// count of msgs sent & received since application start
			[Bindable] private var _msg_scount:int = 0;
			[Bindable] private var _msg_rcount:int = 0;			
			
			/* Controls "send many messages"*/			
			// how many messages to send each blast
			[Bindable] private var _messageCount : String = int(20).toString();			
			// interval between blasts
			[Bindable] private var _millisecondInterval : String = int(1000).toString();			
			// number of blasts
			[Bindable] private var _blastCnt : String = int(200).toString();	
			
			
			
			//--------------------------------
			/*     Application Complete     */
			//--------------------------------
			
			private function applicationComplete(event:FlexEvent):void{		
				swfURL = this.loaderInfo.url;
				swfURL = swfURL.substr(0, swfURL.lastIndexOf("/") + 1);				
				buttons(false);
				explain.text = "TO RUN TEST:\n\n* Enter the message you want to send.\n" +
					"* Enter the url to connect using flash XMLSockets, and click on the socket radio button.\n" + 					
					"* For a single message:\n" +
					"   - Click 'Send'\n" +
					"* For multiple messages:\n"+
					"   - Select the number of msgs per blast.\n" +
					"   - Select the interval between blasts (ms).\n" +
					"   - Select the number of blasts.\n" +
					"   - Click 'Send many messages' to run test.";
			}			
			
			
			
			//--------------------------------
			/*        XMLSocket Handler        */
			//--------------------------------	
			
			private function handleXMLSocket():void {
				_socket = new XMLSocket();
				_socket.addEventListener(Event.CONNECT, onConnect);
				_socket.addEventListener(Event.CLOSE, onClose);
				_socket.addEventListener(DataEvent.DATA, onData);
				_socket.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				_socket.connect("localhost",7843);
			}
			
			protected function onConnect(event:Event):void{
				setStatus("\nSocket: " + event);
				buttons(true);
			}
			
			protected function onClose(event:Event):void{
				setStatus("\nSocket: " + event);
				buttons(false);
			}
			
			private function onData(event:DataEvent):void {
				outputTf.text += '\n\t'+event.data;
				_msg_rcount++;
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				setStatus("\nioErrorHandler: " + event);
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				setStatus("\nsecurityErrorHandler: " + event);
			}

						
			
			//--------------------------------
			/*   Function implementarions   */
			//--------------------------------
			
			private function buttons(value:Boolean):void {
				sendBtn.enabled = value;
				sendManyBtn.enabled = value;
				closeBtn.enabled = value;
			}
			
			private function sendMessageEvent(e:TimerEvent):void {				
				for(var i:int = 1; i <=  int(_messageCount); i++) {															
					var message:String = messageTf.text;
					if(_socket)
						_socket.send(message);
					_msg_scount = _msg_scount + 1;
				}
			}
			
			private function onClickSendBtn():void {
				_msg_scount = _msg_scount + 1;				
				var message:String = messageTf.text;
				if(_socket)
					_socket.send(message);
			}
			
			private function onClickCloseBtn():void {
				stopTimer();
				if(_socket){
					if(_socket.connected){
						_socket.close();
					}
				}
			}
			
			private function stopTimer():void {
				if (myTimer) {
					myTimer.removeEventListener(TimerEvent.TIMER, sendMessageEvent);
					myTimer.stop();
				}
			}
			
			private function sendManyMessages() : void {
				_messageCount = _messageCountLabel.text;
				myTimer = new Timer(int(_millisecondIntervalLabel.text),int(_blastCntLabel.text));
				myTimer.addEventListener(TimerEvent.TIMER, sendMessageEvent);
				myTimer.start();				
			}
			
			protected function setStatus(msg:String):void{
				statusOutput.text += msg;			
			}
			
			protected function clearStatus():void{
				statusOutput.text = "";
				this.currentState = "";
			}
			
		]]>	
	</fx:Script>
	<mx:HBox>
		<mx:VBox>
			<mx:VBox borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">			
				<mx:TextArea  width="580" height="437" id="outputTf" />
				<mx:HBox>
					<mx:TextInput id="messageTf" text="test"                          />
					<mx:Button  label="Send" id="sendBtn"  click="onClickSendBtn()"   />	
				</mx:HBox> 	
			</mx:VBox> 			
			<mx:HBox  width="603" borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">	
				<mx:Button id="sendManyBtn" label="Send many messages" click="sendManyMessages()" />	
				<mx:Label text="Msgs per Blast"                                                         />
				<mx:TextInput width="50" text="{_messageCount}" id="_messageCountLabel"                  />	
				<mx:Label text="Interval(ms)"                                                           />
				<mx:TextInput  width="50"  text="{_millisecondInterval}" id="_millisecondIntervalLabel" />	
				<mx:Label text="Blast Count"                                                            />
				<mx:TextInput  width="50" text="{_blastCnt}" id="_blastCntLabel"                        />	
			</mx:HBox>
			<mx:HBox  width="603" borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">	                     
				<mx:Label text="Msgs sent:"                                />
				<mx:TextInput width="50" text="{_msg_scount}"              />	
				<mx:Label text="Msgs rcvd:"                                />
				<mx:TextInput width="50" text="{_msg_rcount}"              />				
			</mx:HBox>
			<mx:HBox  width="603" borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
				<mx:Label width="20"                                       />				
				<mx:RadioButton groupName="connectType" 
								id="ws"
								label="XMLSocket" 
								click="handleXMLSocket();"
								/>	
				<mx:TextArea width="200" id="wsUrl" text="{socketURL}"/>
				<mx:Button  label="Close" id="closeBtn"  click="onClickCloseBtn()"   />
			</mx:HBox>			
		</mx:VBox>
		<mx:VBox>			
			<mx:TextArea  width="320" height="437" id="statusOutput" />
			<mx:TextArea  width="320" height="219" id="explain" />
		</mx:VBox>
	</mx:HBox>
</s:Application>



