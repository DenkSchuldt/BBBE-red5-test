<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               minWidth="955" minHeight="600" applicationComplete="applicationComplete(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[	
			
			//Very, VERY important.
			Security.allowDomain("*");			
			
			/*----------------- Imports -------------------*/
			
			import com.pnwrain.flashsocket.FlashSocket;
			import com.pnwrain.flashsocket.events.FlashSocketEvent;
			
			import flash.events.*;
			import flash.external.*;
			import flash.net.*;
			
			import flashx.textLayout.events.UpdateCompleteEvent;
			import flashx.textLayout.tlf_internal;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.utils.URLUtil;

			
			/*----------------- Variables -------------------*/
			
			[Bindable] private var swfURL:String = "";					   
					   private var myTimer:Timer;
			
			[Bindable] private var wsURL:String = "ws://192.168.1.182:7171";
			[Bindable] private var wssURL:String = "wss://192.168.1.182:7272";
			
			[Bindable] protected var ws_socket: Boolean;			
			[Bindable] protected var wss_socket: Boolean;
			
			// count of msgs sent & received since application start
			[Bindable] private var _msg_scount:int = 0;
			[Bindable] private var _msg_rcount:int = 0;			
      
			/* Controls "send many messages"*/			
			// how many messages to send each blast
			[Bindable] private var _messageCount : String = int(20).toString();			
			// interval between blasts
			[Bindable] private var _millisecondInterval : String = int(1000).toString();			
			// number of blasts
			[Bindable] private var _blastCnt : String = int(200).toString();	
			
			/*----------------- App Complete -------------------*/
			
			private function applicationComplete(event:FlexEvent):void{		
				swfURL = this.loaderInfo.url;
				swfURL = swfURL.substr(0, swfURL.lastIndexOf("/") + 1)				
				sendBtn.enabled = false;
				sendManyBtn.enabled = false;
				
				ExternalInterface.addCallback("setStatus",setStatus);
				ExternalInterface.addCallback("enableButtons",enableButtons);
				ExternalInterface.addCallback("disableButtons",disableButtons);
				ExternalInterface.addCallback("message",message);				
				
				explain.text="TO RUN TEST:\n\n* Enter the message you want to send.\n" +
					"* Enter the url to connect using ws/wss, and click WS/WSS.\n" + 					
					"* For a single message:\n" +
					"   - Click 'Send'\n" +
					"* For multiple messages:\n"+
					"   - Select the number of msgs per blast.\n" +
					"   - Select the interval between blasts (ms).\n" +
					"   - Select the number of blasts.\n" +
					"   - Click 'Send many messages' to run test."
			}			
			
			
			/*----------------- Function implementations -------------------*/
			
			// Functions called from Javascript
			// Begin --------------------------
			protected function setStatus(msg:String):void{
				statusOutput.text += '\n' + msg;			
			}
			
			protected function enableButtons():void{
				sendBtn.enabled = true;
				sendManyBtn.enabled = true;
			}
			
			protected function disableButtons():void{
				sendBtn.enabled = false;
				sendManyBtn.enabled = false;
			}
			
			private function message(msg:String):void {
				outputTf.text += '\n' + msg;
				_msg_rcount = _msg_rcount + 1;
			}			
			// End --------------------------
			
			private function clear():void{
				stopTimer();
				_msg_scount = 0;
				_msg_rcount = 0;
				outputTf.text = "";				
				ws_socket = false;
				wss_socket = false;
			}
			
			private function onClickSendBtn():void{
				_msg_scount = _msg_scount + 1;
				var protocol:String = "";
				if(ws_socket) protocol = "ws";
				else if(wss_socket) protocol = "wss";
				ExternalInterface.call("sendMsgs",messageTf.text,protocol);				
			}			      							
			
			private function sendManyMessages() : void {
				_messageCount = _messageCountLabel.text;
				myTimer = new Timer(int(_millisecondIntervalLabel.text),int(_blastCntLabel.text));
				myTimer.addEventListener(TimerEvent.TIMER, sendMessageEvent);
				myTimer.start();				
			}
			
			private function sendMessageEvent(e:TimerEvent):void {
				for(var i:int = 1; i <=  int(_messageCount); i++) {
					onClickSendBtn();
				}
			}
						
			private function stopTimer():void {
				if (myTimer) {
					myTimer.removeEventListener(TimerEvent.TIMER, sendMessageEvent);
					myTimer.stop();
				}
			}
			
			//::: WebSocket Connection :::
			private function handleWS():void {			
				clear();
				ExternalInterface.call("ws",wsUrl.text);				
				ws_socket = true;
			}
												
			//::: Secure WebSocket Connection :::
			private function handleWSS():void {
				clear();
				ExternalInterface.call("wss",wssUrl.text);				
				wss_socket = true;
			}
			
		]]>
	</fx:Script>
	<mx:HBox>	
		<mx:VBox>
			<mx:VBox borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">			
				<mx:TextArea  width="580" height="437" id="outputTf" />
				<mx:HBox>
					<mx:TextInput id="messageTf" text="test"                          />
					<mx:Button  label="Send" id="sendBtn"  click="onClickSendBtn()"   />	
				</mx:HBox> 	
			</mx:VBox> 			
			<mx:HBox  width="603" borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">	
				<mx:Button id="sendManyBtn" label="Send many messages" click="sendManyMessages()" />	
				<mx:Label text="Msgs per Blast"                                                         />
				<mx:TextInput width="50" text="{_messageCount}" id="_messageCountLabel"                  />	
				<mx:Label text="Interval(ms)"                                                           />
				<mx:TextInput  width="50"  text="{_millisecondInterval}" id="_millisecondIntervalLabel" />	
				<mx:Label text="Blast Count"                                                            />
				<mx:TextInput  width="50" text="{_blastCnt}" id="_blastCntLabel"                        />	
			</mx:HBox>
			<mx:HBox  width="603" borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">	                     
				<mx:Label text="Msgs sent:"                                />
				<mx:TextInput width="50" text="{_msg_scount}"              />	
				<mx:Label text="Msgs rcvd:"                                />
				<mx:TextInput width="50" text="{_msg_rcount}"              />				
			</mx:HBox>
			<mx:HBox  width="603" borderStyle="solid" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
				<mx:Label width="20"                                       />				
				<mx:RadioButton groupName="connectType" 
								id="ws"
								label="WS" 
								click="handleWS();"
								/>	
				<mx:TextArea width="200" id="wsUrl" text="{wsURL}"/>
				<mx:RadioButton groupName="connectType" 
								id="wss"
								label="WSS" 
								click="handleWSS();"
								/>	
				<mx:TextArea width="200" id="wssUrl" text="{wssURL}"/>
			</mx:HBox>			
		</mx:VBox>
		<mx:VBox>			
			<mx:TextArea  width="320" height="437" id="statusOutput" />
			<mx:TextArea  width="320" height="219" id="explain" />
		</mx:VBox>
	</mx:HBox>
	
</s:Application>



